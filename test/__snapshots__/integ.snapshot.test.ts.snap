// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integ snapshot validation 1`] = `
Object {
  "Outputs": Object {
    "Endpoint": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "WordPressEcsServiceLB538A1BD5",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "WordPressEcsServiceLoadBalancerDNSD66F7753": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "WordPressEcsServiceLB538A1BD5",
          "DNSName",
        ],
      },
    },
    "WordPressEcsServiceServiceURLDC074258": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "WordPressEcsServiceLB538A1BD5",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "WordPressEcsDatabaseBC5843FB": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "AllocatedStorage": "10",
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t3.micro",
        "DBSubnetGroupName": Object {
          "Ref": "WordPressEcsDatabaseSubnetGroup4A8A0A61",
        },
        "DeleteAutomatedBackups": true,
        "Engine": "mysql",
        "EngineVersion": "8.0.21",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "WordPressEcsDatabaseSecret86C748B7",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "WordPressEcsDatabaseSecret86C748B7",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "WordPressEcsDatabaseSecurityGroupDB784C4B",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "WordPressEcsDatabaseSecret86C748B7": Object {
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"admin\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
    },
    "WordPressEcsDatabaseSecretAttachment89768602": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "WordPressEcsDatabaseSecret86C748B7",
        },
        "TargetId": Object {
          "Ref": "WordPressEcsDatabaseBC5843FB",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "WordPressEcsDatabaseSecurityGroupDB784C4B": Object {
      "Properties": Object {
        "GroupDescription": "Security group for Database database",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WordPressEcsDatabaseSecurityGroupfromtestingstackWordPressEcsEcsClusterASGInstanceSecurityGroup81EA60CD330689875EEA": Object {
      "Properties": Object {
        "Description": "from testingstackWordPressEcsEcsClusterASGInstanceSecurityGroup81EA60CD:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsDatabaseSecurityGroupDB784C4B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "WordPressEcsDatabaseSubnetGroup4A8A0A61": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for Database database",
        "SubnetIds": Array [
          Object {
            "Ref": "WordPressEcsVpcPrivateSubnet1Subnet8A2983A9",
          },
          Object {
            "Ref": "WordPressEcsVpcPrivateSubnet2SubnetDA96ABD4",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "WordPressEcsEcsClusterASGDrainECSHookFunctionAllowInvoketestingstackWordPressEcsEcsClusterASGLifecycleHookDrainHookTopic0D92F521298AF9B4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGDrainECSHookFunctionF292A64B",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "WordPressEcsEcsClusterASGLifecycleHookDrainHookTopicF8DF4F0A",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WordPressEcsEcsClusterASGDrainECSHookFunctionF292A64B": Object {
      "DependsOn": Array [
        "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRoleDefaultPolicy1D1C4E1F",
        "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRole4373C7F5",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)
  
  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  \\"\\"\\"Fetch tasks for a container instance ARN.\\"\\"\\"
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']
  
  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']
    
  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "WordPressEcsEcsClusterB051F2EF",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRole4373C7F5",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRole4373C7F5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRoleDefaultPolicy1D1C4E1F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "WordPressEcsEcsClusterASGF425BB11",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "WordPressEcsEcsClusterB051F2EF",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "WordPressEcsEcsClusterB051F2EF",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "WordPressEcsEcsClusterB051F2EF",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRoleDefaultPolicy1D1C4E1F",
        "Roles": Array [
          Object {
            "Ref": "WordPressEcsEcsClusterASGDrainECSHookFunctionServiceRole4373C7F5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WordPressEcsEcsClusterASGDrainECSHookFunctionTopicC611ECFB": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGDrainECSHookFunctionF292A64B",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "WordPressEcsEcsClusterASGLifecycleHookDrainHookTopicF8DF4F0A",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "WordPressEcsEcsClusterASGF425BB11": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "WordPressEcsEcsClusterASGLaunchConfigDE0C2F3F",
        },
        "MaxSize": "3",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "WordPressEcsVpcPrivateSubnet1Subnet8A2983A9",
          },
          Object {
            "Ref": "WordPressEcsVpcPrivateSubnet2SubnetDA96ABD4",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "WordPressEcsEcsClusterASGInstanceProfile22BE408A": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "WordPressEcsEcsClusterASGInstanceRole6B0483FC",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "WordPressEcsEcsClusterASGInstanceRole6B0483FC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WordPressEcsEcsClusterASGInstanceRoleDefaultPolicy9002C9CC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "WordPressEcsEcsClusterB051F2EF",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "WordPressEcsEcsClusterB051F2EF",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WordPressEcsEcsClusterASGInstanceRoleDefaultPolicy9002C9CC",
        "Roles": Array [
          Object {
            "Ref": "WordPressEcsEcsClusterASGInstanceRole6B0483FC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77": Object {
      "Properties": Object {
        "GroupDescription": "testing-stack/WordPressEcs/EcsCluster/ASG/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WordPressEcsEcsClusterASGInstanceSecurityGroupfromtestingstackWordPressEcsServiceLBSecurityGroupF32BB12032768655357788818D": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 32768,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsServiceLBSecurityGroup59F9C55A",
            "GroupId",
          ],
        },
        "ToPort": 65535,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "WordPressEcsEcsClusterASGLaunchConfigDE0C2F3F": Object {
      "DependsOn": Array [
        "WordPressEcsEcsClusterASGInstanceRoleDefaultPolicy9002C9CC",
        "WordPressEcsEcsClusterASGInstanceRole6B0483FC",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "WordPressEcsEcsClusterASGInstanceProfile22BE408A",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3a.small",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "WordPressEcsEcsClusterB051F2EF",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "WordPressEcsEcsClusterASGLifecycleHookDrainHookD7966898": Object {
      "DependsOn": Array [
        "WordPressEcsEcsClusterASGLifecycleHookDrainHookRoleDefaultPolicy291CEBE9",
        "WordPressEcsEcsClusterASGLifecycleHookDrainHookRole0D8CC841",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "WordPressEcsEcsClusterASGF425BB11",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "WordPressEcsEcsClusterASGLifecycleHookDrainHookTopicF8DF4F0A",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGLifecycleHookDrainHookRole0D8CC841",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "WordPressEcsEcsClusterASGLifecycleHookDrainHookRole0D8CC841": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WordPressEcsEcsClusterASGLifecycleHookDrainHookRoleDefaultPolicy291CEBE9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "WordPressEcsEcsClusterASGLifecycleHookDrainHookTopicF8DF4F0A",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WordPressEcsEcsClusterASGLifecycleHookDrainHookRoleDefaultPolicy291CEBE9",
        "Roles": Array [
          Object {
            "Ref": "WordPressEcsEcsClusterASGLifecycleHookDrainHookRole0D8CC841",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WordPressEcsEcsClusterASGLifecycleHookDrainHookTopicF8DF4F0A": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/EcsCluster/ASG",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "WordPressEcsEcsClusterASGScalingPolicyKeepCpuHalfwayLoaded51DA1CCE": Object {
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "WordPressEcsEcsClusterASGF425BB11",
        },
        "PolicyType": "TargetTrackingScaling",
        "TargetTrackingConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ASGAverageCPUUtilization",
          },
          "TargetValue": 50,
        },
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "WordPressEcsEcsClusterB051F2EF": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "WordPressEcsFileSystem0FE21389": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "Encrypted": true,
        "FileSystemTags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/FileSystem",
          },
        ],
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "WordPressEcsFileSystemEfsMountTarget151790379": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "WordPressEcsFileSystem0FE21389",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "WordPressEcsFileSystemEfsSecurityGroupE1ACC1C0",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet1Subnet8A2983A9",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "WordPressEcsFileSystemEfsMountTarget24EDF0CBB": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "WordPressEcsFileSystem0FE21389",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "WordPressEcsFileSystemEfsSecurityGroupE1ACC1C0",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet2SubnetDA96ABD4",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "WordPressEcsFileSystemEfsSecurityGroupE1ACC1C0": Object {
      "Properties": Object {
        "GroupDescription": "testing-stack/WordPressEcs/FileSystem/EfsSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/FileSystem",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WordPressEcsFileSystemEfsSecurityGroupfromtestingstackWordPressEcsEcsClusterASGInstanceSecurityGroup81EA60CD204976A257F1": Object {
      "Properties": Object {
        "Description": "from testingstackWordPressEcsEcsClusterASGInstanceSecurityGroup81EA60CD:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsFileSystemEfsSecurityGroupE1ACC1C0",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "WordPressEcsService756743EE": Object {
      "DependsOn": Array [
        "WordPressEcsServiceLBPublicListenerECSGroup6008A666",
        "WordPressEcsServiceLBPublicListenerD9840C9A",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "WordPressEcsEcsClusterB051F2EF",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "EC2",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "web",
            "ContainerPort": 80,
            "TargetGroupArn": Object {
              "Ref": "WordPressEcsServiceLBPublicListenerECSGroup6008A666",
            },
          },
        ],
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": Object {
          "Ref": "WordPressEcsServiceTaskDef5E2B238A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "WordPressEcsServiceLB538A1BD5": Object {
      "DependsOn": Array [
        "WordPressEcsVpcPublicSubnet1DefaultRoute302AD6DA",
        "WordPressEcsVpcPublicSubnet2DefaultRoute1B791D0C",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "WordPressEcsServiceLBSecurityGroup59F9C55A",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "WordPressEcsVpcPublicSubnet1Subnet45F30A18",
          },
          Object {
            "Ref": "WordPressEcsVpcPublicSubnet2SubnetDB529F9E",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "WordPressEcsServiceLBPublicListenerD9840C9A": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "WordPressEcsServiceLBPublicListenerECSGroup6008A666",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "WordPressEcsServiceLB538A1BD5",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "WordPressEcsServiceLBPublicListenerECSGroup6008A666": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckPath": "/wp-includes/images/blank.gif",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "WordPressEcsServiceLBSecurityGroup59F9C55A": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB testingstackWordPressEcsServiceLB2F1A441B",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WordPressEcsServiceLBSecurityGrouptotestingstackWordPressEcsEcsClusterASGInstanceSecurityGroup81EA60CD32768655357ED5E462": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsEcsClusterASGInstanceSecurityGroup47B2EB77",
            "GroupId",
          ],
        },
        "FromPort": 32768,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsServiceLBSecurityGroup59F9C55A",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 65535,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "WordPressEcsServiceTaskCountTarget82DE54D8": Object {
      "Properties": Object {
        "MaxCapacity": 6,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "WordPressEcsEcsClusterB051F2EF",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "WordPressEcsService756743EE",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "WordPressEcsServiceTaskCountTargetCpuScaling1E3F84D5": Object {
      "Properties": Object {
        "PolicyName": "testingstackWordPressEcsServiceTaskCountTargetCpuScalingB6EEC98E",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "WordPressEcsServiceTaskCountTarget82DE54D8",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "WordPressEcsServiceTaskDef5E2B238A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "WORDPRESS_DB_NAME",
                "Value": "wordpress",
              },
            ],
            "Essential": true,
            "Image": "wordpress",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "WordPressEcsServiceTaskDefwebLogGroup69746206",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "Service",
              },
            },
            "Memory": 512,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/var/www/html",
                "ReadOnly": false,
                "SourceVolume": "efs",
              },
            ],
            "Name": "web",
            "PortMappings": Array [
              Object {
                "ContainerPort": 80,
                "HostPort": 0,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "WORDPRESS_DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "WordPressEcsDatabaseSecretAttachment89768602",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "WORDPRESS_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "WordPressEcsDatabaseSecretAttachment89768602",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "WORDPRESS_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "WordPressEcsDatabaseSecretAttachment89768602",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsServiceTaskDefExecutionRole90934E6B",
            "Arn",
          ],
        },
        "Family": "testingstackWordPressEcsServiceTaskDefC3B4611C",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsServiceTaskDefTaskRole15E267C6",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EfsVolumeConfiguration": Object {
              "FileSystemId": Object {
                "Ref": "WordPressEcsFileSystem0FE21389",
              },
            },
            "Name": "efs",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "WordPressEcsServiceTaskDefExecutionRole90934E6B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WordPressEcsServiceTaskDefExecutionRoleDefaultPolicy49FFB904": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "WordPressEcsServiceTaskDefwebLogGroup69746206",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "WordPressEcsDatabaseSecretAttachment89768602",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WordPressEcsServiceTaskDefExecutionRoleDefaultPolicy49FFB904",
        "Roles": Array [
          Object {
            "Ref": "WordPressEcsServiceTaskDefExecutionRole90934E6B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WordPressEcsServiceTaskDefTaskRole15E267C6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WordPressEcsServiceTaskDefwebLogGroup69746206": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "WordPressEcsVpc532EC8A6": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "WordPressEcsVpcIGWF8916901": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "WordPressEcsVpcPrivateSubnet1DefaultRoute9F4F024F": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1NATGatewayD1A35C79",
        },
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet1RouteTable978C9236",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "WordPressEcsVpcPrivateSubnet1RouteTable978C9236": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "WordPressEcsVpcPrivateSubnet1RouteTableAssociationFAC63540": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet1RouteTable978C9236",
        },
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet1Subnet8A2983A9",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "WordPressEcsVpcPrivateSubnet1Subnet8A2983A9": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "WordPressEcsVpcPrivateSubnet2DefaultRouteFDFD67D3": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1NATGatewayD1A35C79",
        },
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet2RouteTable0F058C18",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "WordPressEcsVpcPrivateSubnet2RouteTable0F058C18": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "WordPressEcsVpcPrivateSubnet2RouteTableAssociation7D58EE9D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet2RouteTable0F058C18",
        },
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPrivateSubnet2SubnetDA96ABD4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "WordPressEcsVpcPrivateSubnet2SubnetDA96ABD4": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "WordPressEcsVpcPublicSubnet1DefaultRoute302AD6DA": Object {
      "DependsOn": Array [
        "WordPressEcsVpcVPCGWF055B850",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "WordPressEcsVpcIGWF8916901",
        },
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1RouteTable752D3055",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "WordPressEcsVpcPublicSubnet1EIP1CAB09E2": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "WordPressEcsVpcPublicSubnet1NATGatewayD1A35C79": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "WordPressEcsVpcPublicSubnet1EIP1CAB09E2",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1Subnet45F30A18",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "WordPressEcsVpcPublicSubnet1RouteTable752D3055": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "WordPressEcsVpcPublicSubnet1RouteTableAssociation51510531": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1RouteTable752D3055",
        },
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet1Subnet45F30A18",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "WordPressEcsVpcPublicSubnet1Subnet45F30A18": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "WordPressEcsVpcPublicSubnet2DefaultRoute1B791D0C": Object {
      "DependsOn": Array [
        "WordPressEcsVpcVPCGWF055B850",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "WordPressEcsVpcIGWF8916901",
        },
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet2RouteTable49ECA83F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "WordPressEcsVpcPublicSubnet2RouteTable49ECA83F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "WordPressEcsVpcPublicSubnet2RouteTableAssociationA78B3CDF": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet2RouteTable49ECA83F",
        },
        "SubnetId": Object {
          "Ref": "WordPressEcsVpcPublicSubnet2SubnetDB529F9E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "WordPressEcsVpcPublicSubnet2SubnetDB529F9E": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "testing-stack/WordPressEcs/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "WordPressEcsVpcVPCGWF055B850": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "WordPressEcsVpcIGWF8916901",
        },
        "VpcId": Object {
          "Ref": "WordPressEcsVpc532EC8A6",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
}
`;
